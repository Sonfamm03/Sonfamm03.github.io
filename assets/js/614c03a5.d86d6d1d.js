"use strict";(self.webpackChunkmirai_sdk_doc=self.webpackChunkmirai_sdk_doc||[]).push([[378],{7072:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>o});var t=i(5893),s=i(1151);const r={slug:"/sdk/guides/unity"},l="Unity SDK",a={id:"SDK/SDK Guides/Unity SDK",title:"Unity SDK",description:"Overview",source:"@site/docs/2. SDK/SDK Guides/1. Unity SDK.md",sourceDirName:"2. SDK/SDK Guides",slug:"/sdk/guides/unity",permalink:"/sdk/guides/unity",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/sdk/guides/unity"},sidebar:"defaultSidebar",previous:{title:"Guides",permalink:"/sdk/guides"},next:{title:"JavaScript SDK",permalink:"/sdk/guides/javascript"}},d={},o=[{value:"Overview",id:"overview",level:2},{value:"Package Dependencies",id:"package-dependencies",level:3},{value:"Initialize",id:"initialize",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Class: ShardsTech",id:"class-shardstech",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"unity-sdk",children:"Unity SDK"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The ShardsTech API provides functionality for integrating with the ShardsTech platform, allowing users to interact with various features such as guild management, user authentication, transaction history, chat functionality, referral systems, and more."}),"\n",(0,t.jsx)(n.h3,{id:"package-dependencies",children:"Package Dependencies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"com.unity.nuget.newtonsoft-json"'}),"\n",(0,t.jsx)(n.li,{children:'"com.itisnajim.socketiounity"'}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"initialize",children:"Initialize"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Configure MiraiSDKSettings ",(0,t.jsx)(n.code,{children:"ClientID"})," and ",(0,t.jsx)(n.code,{children:"AppSchema"})]}),"\n",(0,t.jsx)(n.li,{children:"Call ShardsTech.InitAsync if you don't use Auto Init option."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public static async Task InitAsync()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When user log-in or log-out your system, please call ShardsTech.Login / ShardsTech.Logout;"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public static async Task Login(string token)\npublic static void Logout()\n``\n- Example:\n```csharp\nprivate async void Start()\n{\n    await MiraiSDK.InitAsync();\n    GameAuth.OnLoginStateChanged += OnAuthStateChanged;\n    OnAuthStateChanged(GameAuth.AccessToken);\n}\nprivate void OnAuthStateChanged(string token=null)\n{\n    if (string.IsNullOrEmpty(token)) ShardsTech.Logout();\n    else _ = ShardsTech.Login("Bearer " + token);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"class-shardstech",children:"Class: ShardsTech"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ShardsTech"})," class encapsulates functionality for interacting with the ShardsTech API."]}),"\n",(0,t.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ShardsTechConfig: Configuration settings for ShardsTech."}),"\n",(0,t.jsx)(n.li,{children:"MyUser: Information about the current user."}),"\n",(0,t.jsx)(n.li,{children:"MyGuild: Information about the guild associated with the current user."}),"\n",(0,t.jsx)(n.li,{children:"MySeatOnSale: Information about the Seat currently on sale by the user."}),"\n",(0,t.jsx)(n.li,{children:"MeIsOwner: Indicates whether the current user is the owner of the guild."}),"\n",(0,t.jsx)(n.li,{children:"IsLinkedAddress: Indicates whether the current user has a linked address."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"InitAsync(): Initializes the ShardsTech API asynchronously."}),"\n",(0,t.jsx)(n.li,{children:"GetLeaderboards(): Retrieves leaderboard data."}),"\n"]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)("b",{children:"1 #region User"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Login(string token): Logs in the user using the provided authorization header."}),"\n",(0,t.jsx)(n.li,{children:"Logout(): Logs out the current user."}),"\n",(0,t.jsx)(n.li,{children:"LinkAddress(CancellationToken cancellationToken = default): Links the user's address."}),"\n",(0,t.jsx)(n.li,{children:"FetchMyUser(): Retrieves information about the current user."}),"\n",(0,t.jsx)(n.li,{children:"GetUserHistories(int page = 1, int limit = 100): Retrieves user transaction history."}),"\n",(0,t.jsx)(n.li,{children:"GetUserScores(string leaderBoardId, int page = 1, int limit = 100, SortType sort = SortType.desc): Retrieves user scores for a specific leaderboard."}),"\n"]})]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)("b",{children:"2 #region Guild"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"CreateGuild(string name, double seatPrice, object metadata, float txGuildOwnerShare, ProfitPercentConfig profitPercentConfig, CancellationToken cancellationToken = default): Creates a guild."}),"\n",(0,t.jsx)(n.li,{children:'GetGuildScores(string leaderBoardId, string name = "", int page = 1, int limit = 100, SortType sort = SortType.desc): Retrieves guild scores for a specific leaderboard.'}),"\n",(0,t.jsx)(n.li,{children:"GetGuildHistories(int page = 1, int limit = 100): Retrieves guild transaction history."}),"\n",(0,t.jsx)(n.li,{children:"GetUsersOfGuild(string guildId): Retrieves users belonging to a guild."}),"\n"]}),(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)("b",{children:"2.1 #region MyGuild"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"FetchMyGuild(): Retrieves information about the guild associated with the current user."}),"\n",(0,t.jsx)(n.li,{children:"UpdateGuild(string name, double seatPrice, float txGuildOwnerShare, ProfitPercentConfig profitPercentConfig, CancellationToken cancellationToken = default): Updates guild information."}),"\n",(0,t.jsx)(n.li,{children:"UpdateLogoDescriptionGuild(string avatar, string description, CancellationToken cancellationToken = default): Updates guild logo and description."}),"\n"]}),(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)("b",{children:"2.1.1#region Chat"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"OnlineUsersMyGuild(): Retrieves online users in the current guild."}),"\n",(0,t.jsx)(n.li,{children:"GetChatHistory(int page = 1, int limit = 100): Retrieves chat history."}),"\n",(0,t.jsx)(n.li,{children:"SendChat(string message): Sends a chat message."}),"\n"]})]})]}),(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)("b",{children:"2.2 #region JoinGuildRequest"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"CreateJoinGuildRequest(string guildId): Creates a join guild request."}),"\n",(0,t.jsx)(n.li,{children:"GetJoinGuildRequestsOfUser(): Retrieves join guild requests of the current user."}),"\n",(0,t.jsx)(n.li,{children:"GetJoinGuildRequestsOfMyGuild(): Retrieves join guild requests for my guild."}),"\n",(0,t.jsx)(n.li,{children:"GetJoinGuildRequests(string guildId): Retrieves join guild requests for a specific guild."}),"\n",(0,t.jsx)(n.li,{children:"Accept(string guildId, string userId, CancellationToken cancellationToken = default): Accept join guild request."}),"\n",(0,t.jsx)(n.li,{children:"Reject(string guildId, string userId, CancellationToken cancellationToken = default): Reject join guild request."}),"\n"]})]})]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)("b",{children:"3 #region Fractions"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GetMyFractions(): Retrieves the current user's Fractions."}),"\n",(0,t.jsx)(n.li,{children:"GetTotalFractionsOfGuild(string guildId): Retrieves the total fraction of a guild."}),"\n",(0,t.jsx)(n.li,{children:"GetMyFractionsOfGuild(string guildId): Retrieves the user's fraction of a guild."}),"\n",(0,t.jsx)(n.li,{children:"GetBuyFractionsPrice(string guildId, long amount): Retrieves the buy fractions price."}),"\n",(0,t.jsx)(n.li,{children:"GetSellFractionsPrice(string guildId, long amount): Retrieves the sell fractions price."}),"\n",(0,t.jsx)(n.li,{children:"BuyFractions(string guildAddress, long amount, long index = 0, CancellationToken cancellationToken = default): Buys Fractions from a guild."}),"\n",(0,t.jsx)(n.li,{children:"SellFractions(string guildAddress, long amount, CancellationToken cancellationToken = default): Sells Fractions to a guild."}),"\n"]})]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)("b",{children:"4 #region Seat"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GetSeatsOnSale(string guildId = null): Retrieves seats on sale."}),"\n",(0,t.jsx)(n.li,{children:"GetBuySeatPrice(string guildId): Retrieves the buy seat price."}),"\n",(0,t.jsx)(n.li,{children:"BuySeat(string guildAddress, string seller, double price, CancellationToken cancellationToken = default): Buys a seat from a user."}),"\n",(0,t.jsx)(n.li,{children:"SellSeat(double price, CancellationToken cancellationToken = default): Sells a seat."}),"\n",(0,t.jsx)(n.li,{children:"FetchMySeatOnSale(): Retrieves information about the seat currently on sale by the user."}),"\n",(0,t.jsx)(n.li,{children:"UpdateSellSeatPrice(string sellSeatId, double price, CancellationToken cancellationToken = default): Updates the price of a seat on sale."}),"\n",(0,t.jsx)(n.li,{children:"CancelSellSeat(string sellSeatId, CancellationToken cancellationToken = default): Cancels the sale of a seat."}),"\n",(0,t.jsx)(n.li,{children:"BurnSeat(CancellationToken cancellationToken = default): Burns a seat."}),"\n"]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"This draft provides an overview of the classes, properties, and methods available in the ShardsTech API."})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>l});var t=i(7294);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);